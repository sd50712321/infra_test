version: "3"

services:
  node-app:
    container_name: node-app
    image: app
    ports:
      - "3001:3001"
      - "9615:9615"
    depends_on:
      - prometheus
      - loki
    networks:
      - monitoring
    volumes:
      - ./logs:/usr/src/app/logs

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=7d"
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    container_name: grafana
    cpu_shares: 2
    ports:
      - "3000:3000"
    volumes:
      # - ./datasources:/etc/grafana/provisioning/datasources
      - ./dashboards:/etc/grafana/dashboards
      - ./provisioning:/etc/grafana/provisioning
      - ./grafana-data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: "${GF_SECURITY_ADMIN_USER}"
      GF_SECURITY_ADMIN_PASSWORD: "${GF_SECURITY_ADMIN_PASSWORD}"
    depends_on:
      - prometheus
      - loki
    networks:
      - monitoring

  loki:
    image: grafana/loki:latest
    volumes:
      - ./loki-data:/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./loki-data:/loki
      - ./logs:/usr/src/app/logs
      - ./promtail-config.yml:/etc/promtail/promtail-config.yml
    command: -config.file=/etc/promtail/promtail-config.yml
    depends_on:
      - loki
    networks:
      - monitoring

networks:
  monitoring:

  # nginx-proxy:
  #   image: jwilder/nginx-proxy
  #   container_name: nginx-proxy
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - /etc/nginx/vhost.d
  #     - /usr/share/nginx/html
  #     - /var/run/docker.sock:/tmp/docker.sock:ro
  #     - ./certs:/etc/nginx/certs:ro

  # letsencrypt-companion:
  #   image: jrcs/letsencrypt-nginx-proxy-companion
  #   container_name: letsencrypt-companion
  #   environment:
  #     - NGINX_PROXY_CONTAINER=nginx-proxy
  #   volumes:
  #     - /etc/nginx/vhost.d
  #     - /usr/share/nginx/html
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./certs:/etc/nginx/certs:rw
